1. Primitive data types cannot be used while initializing the collections.

for eg: use of ArrayList<int> numbers = new ArrayList<int>() is wrong. 
We need to specify ArrayList<Integer> as the collections are implemented using template 
types and not primitive data types.

2. Collections classes are grouped by interfaces.

1. List Interface implements the following :
	1. ArrayList - 	Normally if you do not specify number of list elements while initializing,
					the list is initialized to 10.
				   	Removing elements from the end of the arraylist is more faster than removing them from the beginning
		   		   	This is becoz, removing from end just decrements the size of the list
					But removing from beginning means the element is removed from the list and remaining elements are copied to the 
					new location. == > Process is very slow
					
					The following are the basic methods mostly used: 
						arrayList.add(arg0)
						arrayList.get(index)
						arrayList.remove(index)
						arrayList.size() ==> Returns the size of the array list
						
	2. LinkedList - Uses the same methods as arrayList. List<T> interface implements LinkedList too 
	
	Where to use LinkedList & where to use ArrayList ---> if you want to remove elements in the end of a list 
	use Array List.	If you want to remove elements from the beginning or middle of the list, then use LinkedList	
	
	ArrayLists manages  arrays internally
	LinkedLists consists of elements where each element has a reference to next and prev elements.					
 
 	ArrayList took less time to add elements at the end of the list than the linked list coz in a linkedlist,
 	we need to traverse through every item and then get to the end of the list and then add the elements.
 	Whereas the arrayList can get the last element thru its index and justv insert a new element at the 
 	end of the list.
 	
 	When you need to add items to the beginning or middle of a list, always go in for the use of a LinkedList
 	as it has to just point the references to the new node being created which takes less time.
 	In case of arraylists, if an item has to be added at the beginning of the list, we need to move all 
 	the elements down and then insert the new element which takes quite a long time as shown in 
 	"LinkedListImplemenmtation.java" class.
 	
 	In case if you want to add an element somewhere near the end of the list, then go for using ArrayList coz these 
 	lists take less time to push the elements down by 1 and add a new element than traversing the whole linkedlist near 
 	to the end and then creating a reference to the new node.
 	
 	In a nutshell  use ArrayLists wherever possible but use linkedList only if you have to insert the elements in the beginning
 	or in the middle.

 2. Maps Interface:
 	Maps always exist in a Key Value pair.
 	You cannot add a duplicate key to a map.
 	1. HashMap : 
		 	HashMap does not give the output in a sorted order.
		 	To add a value to the hashmap - map.put(K,V)
		 	To remove a value - map.remove(K,V)
		 	Size of the hashmap - map.size()
		 	To iterate a HashMap - for(Map.Entry<K,V> myVal : myMap.entrySet()){
		 								myVal.getKey();
		 								myVal.getValue();
		 								}
	
	2. LinkedHashMap: 
				Basically it is a HashMap but consists of doubly linkedList that connects all the elements  
				So the elements stay in the stay order like you added.
	3. TreeMap: 
				Sorted Order of the given Key value pairs. 
				Iterate through the key set and the keys&values are printed on a sorted order											

3. Set Interface:
	-Sets basically consist of unique elements.
	-You can print out a set just using its variable name on syso
	-Sets are basically optimized. We can use "contains' method to see if an element is actually present in it or not
	- To check if set is empty "isEmpty()"
	-"retainAll" gives the intersection of 2 sets -- used to find common elements between sets
	-"removeAll" gives the difference between 2 sets -- used to find unique elements between 2 sets
	There are 3 types of HashSet here:
	1. HashSet- This does not maintain any order of the inserted elements.
	2. LinkedHashSet - Maintains the order of the elements in the way you added them.
	2. TreeSet- This set basically sorts its inputs. 
	
	
	
Additional Notes about Maps & Sets --
- If you have custom objects and want to use them as a part of Sets/Maps, the maps/sets cannot determine if you are
adding duplicate elements or not- Refer "CustomObjectsMapsAndSets" class.
- In order to make them work, you need to implement the hashCode and equals function for your class and then run the code.
- You will now see that the sets/maps will not contain the duplicate item occurring twice in them	


COMPARATORS: Refer SortingUsingComparators class

-- Collections<T> is a super class to all the above interfaces. So if you have a method to which you should
pass Set/List/Map as a parameter, then you can define an argument "Collection<String> collection" in the
method definition.

Class should implement Comparable in case you want to sort the TreeSet/TreeMaps in their Natural Order 


QUEUES:
1. It is a FIFO structure.
2. Add elements to the TAIL and remove it from the HEAD.
3. There are various number of implementations for Queue like - ArrayBlockingQueue, LinkedList, PriorityQueues and so on
4. The ArrayBlockingQueue is similar to the implementation of a LinkedList but differs that it needs a 
	size to be given while declaring it.
/*
		 * add- adds an element to the queue
		 * 		if the queue is full, returns a IllegalStateException if you tryto add more elements.
		 * offer- Also adds elements to the queue. it returns false if the queue is full an does not add the additional 
		 * 		elements to the queue and no exception is given.
		 *  	  But you can use it as if(q.offer(e) == true){
		 *  									q.offer	(e);	
		 * 						}
		 * 
		 * remove - removes the element from  the head of the queue. If queue is emopty and you try to remove from it, 
		 * 			you get a NoSuchElementException thrown
		 * poll - also removes the element from the head of the queue. If the queue is empty, it prints "null" 
		 * 			when we try to remove the element.
		 * 
		 * element() -- Returns the HEAD element value from the queue. If queue is empty and you try to call element()
		 * 				you would get a NoSuchElementException
		 * peek() -- Returns the HEAD element value for the queue. If queue is empty and try to peek, you get a null
		 * 			printed with no exception.
		 *  
		 */


ITERATORS:
Difference between for each and iterators is that you can modify the list while iterating through it.
ListIterator also allows you to add to the list and access even the previous () element in that list


HASMAP COLLISION THEORY :
If two different objects have the same hashCode, what happens depends 
on the output of equals. If key2.equals(key1), then (key1, val1) is 
replaced with (key2, val2), else a new entry (key2, val2) is added to the same bucket of the hash map. 
Please note that hashCode determines which bucket the key-val pair goes to 
while equals determines whether the object exists on not. 
A more interesting question would be "What happens if two objects that are équal' returns 
different hash codes". In that case, they would hash to different buckets and hence will result in duplicate entries.



down vote
accepted
A hashmap works like this (this is a little bit simplified, but it illustrates the basic mechanism):

It has a number of "buckets" which it uses to store key-value pairs in. Each bucket has a unique number - 
that's what identifies the bucket. When you put a key-value pair into the map, the hashmap will look at the hash 
code of the key, and store the pair in the bucket of which the identifier is the hash code of the key. 
For example: The hash code of the key is 235 -> the pair is stored in bucket number 235. 
(Note that one bucket can store more then one key-value pair).

When you lookup a value in the hashmap, by giving it a key, it will first look at the hash code of the key that you gave. 
The hashmap will then look into the corresponding bucket, and then it will compare the key that you gave with the keys of 
all pairs in the bucket, by comparing them with equals().

Now you can see how this is very efficient for looking up key-value pairs in a map: by the hash code of the key the 
hashmap immediately knows in which bucket to look, so that it only has to test against what's in that bucket.

Looking at the above mechanism, you can also see what requirements are necessary on the hashCode() and equals() methods of keys:

If two keys are the same (equals() returns true when you compare them), their hashCode() method must return the same number. 
If keys violate this, then keys that are equal might be stored in different buckets, and the hashmap would not 
be able to find key-value pairs (because it's going to look in the same bucket).
If two keys are different, then it doesn't matter if their hash codes are the same or not. 
They will be stored in the same bucket if their hash codes are the same, and in this case, 
the hashmap will use equals() to tell them apart.
 	 	 